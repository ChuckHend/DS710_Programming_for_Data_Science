if(x$salePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
score <- function(x){
ft   <- x$Gr.Liv.Area/1000
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
x=d[1,]
x
ft   <- x$Gr.Liv.Area/1000
ft
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
sale
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
loc
ft+sale+loc
score <- function(x){
ft   <- x$Gr.Liv.Area/1000
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
score <- function(x){
ft   <- x[,'Gr.Liv.Area']/1000
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
score <- function(x){
ft   <- x['Gr.Liv.Area']/1000
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
ft <- x$Gr.Liv.Area/1000
score <- function(x){
ft <- x$Gr.Liv.Area/1000
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
score <- function(x){
print(x$Order)
ft <- x$Gr.Liv.Area/1000
if(x$SalePrice<300000){
sale<- 3
if(x$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x$Neighborhood=='NoRidge'){
loc<-3
}else if(x$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
apply(d, 1, score)
return(ft+sale+loc)
score <- function(d){
ft <- d$Gr.Liv.Area/1000
if(d$SalePrice<300000){
sale<- 3
if(d$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(d$Neighborhood=='NoRidge'){
loc<-3
}else if(d$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
d
d[1,]
typeof(d[1,])
d1 <- d[1,]
d1
d1$Order
d1$Sale.Condition
rm(list=ls())
d<- read.csv('AmesHousing.csv')
score <- function(d){
ft <- d$Gr.Liv.Area/1000
if(d$SalePrice<300000){
sale<- 3
if(d$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(d$Neighborhood=='NoRidge'){
loc<-3
}else if(d$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
d<- read.csv('AmesHousing.csv')
score <- function(d){
ft <- d$Gr.Liv.Area/1000
if(d$SalePrice<300000){
sale<- 3
if(d$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(d$Neighborhood=='NoRidge'){
loc<-3
}else if(d$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
score <- function(d){
print(typeof(d))
ft <- d$Gr.Liv.Area/1000
if(d$SalePrice<300000){
sale<- 3
if(d$SalePrice<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(d$Neighborhood=='NoRidge'){
loc<-3
}else if(d$Neighborhood=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
chars <- names(d)
chars
chars=='Gr.Liv.Area'
d1 <- d[1,]
d1
d1[chars=='Gr.Liv.Area']
score <- function(d){
chars<-names(d)
ft <- d[chars=='Gr.Liv.Area']/1000
if(d[chars=='SalePrice']<300000){
sale<- 3
if(d[chars=='SalePrice']<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(d[chars=='Neighborhood']=='NoRidge'){
loc<-3
}else if(d[chars=='Neighborhood']=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
score <- function(x){
chars<-names(x)
ft <- x[chars=='Gr.Liv.Area']/1000
if(x[chars=='SalePrice']<300000){
sale<- 3
if(x[chars=='SalePrice']<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x[chars=='Neighborhood']=='NoRidge'){
loc<-3
}else if(x[chars=='Neighborhood']=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
x=d[1,]
chars<-names(x)
ft <- x[chars=='Gr.Liv.Area']/1000
x[chars=='Gr.Liv.Area']
x[chars=='Gr.Liv.Area']/1000
ft <- as.numeric(x[chars=='Gr.Liv.Area'])/1000
as.numeric(x[chars=='Gr.Liv.Area'])
score <- function(x){
chars<-names(x)
ft <- as.numeric(x[chars=='Gr.Liv.Area'])/1000
if(x[chars=='SalePrice']<300000){
sale<- 3
if(as.numeric(x[chars=='SalePrice'])<200000){
sale <- sale +2
}
}else{
sale<- 0
}
if(x[chars=='Neighborhood']=='NoRidge'){
loc<-3
}else if(x[chars=='Neighborhood']=='NridgHt'){
loc<-2
}else{
loc<-0
}
return(ft+sale+loc)
}
apply(d, 1, score)
max(apply(d, 1, score))
which.max(apply(d, 1, score))
# explore dataset
d <- read.csv('Best Cities.csv')
pleasantness <- function(dataVec){
trav <- dataVec[2]/20
if(dataVec[12]<10000){
pop <- 3
}else{
pop <- 0
}
bike <- dataVec[16]/10
tmax <- max((dataVec[17]-80)/10, 0)
p_score <- trav + pop + bike - tmax
return(p_score)
}
pleasantness(d$Madison.city..Wisconsin)
apply(d, 2, pleasantness)
apply(d[,2:length(d)], 2, pleasantness)
apply(d[,2:length(d)], 2, pleasantness)
?t.test
mourner <- c(3, 7, 8, 3, 7, 3, 3, 6, 2, 3, 3, 2, 3, 4, 3, 8, 10,
2, 3, 3, 7, 4, 2, 10, 6, 3, 4, 9, 3, 6, 4, 2, 4, 2,
6, 4, 3, 8, 5, 2, 5, 4, 8, 11, 2, 6, 4, 4, 3, 3, 7,
2, 7, 3, 4, 2, 11, 2, 6, 5, 4, 8, 2, 3, 7, 2, 4, 6,
4, 3, 5, 6, 2, 3, 5, 10, 5, 6, 5, 4, 8, 8, 8, 2, 3,
8, 7, 2, 3, 6, 3, 6, 2, 3, 9, 3, 6, 4, 3, 3, 7, 3,
5, 2, 9, 3, 8, 8, 2, 6, 4, 3, 4, 5, 2, 3, 3, 4, 2,
7, 5, 6, 8, 4, 3, 7, 6, 6, 5)
mourner <- c(3, 7, 8, 3, 7, 3, 3, 6, 2, 3, 3, 2, 3, 4, 3, 8, 10,
2, 3, 3, 7, 4, 2, 10, 6, 3, 4, 9, 3, 6, 4, 2, 4, 2,
6, 4, 3, 8, 5, 2, 5, 4, 8, 11, 2, 6, 4, 4, 3, 3, 7,
2, 7, 3, 4, 2, 11, 2, 6, 5, 4, 8, 2, 3, 7, 2, 4, 6,
4, 3, 5, 6, 2, 3, 5, 10, 5, 6, 5, 4, 8, 8, 8, 2, 3,
8, 7, 2, 3, 6, 3, 6, 2, 3, 9, 3, 6, 4, 3, 3, 7, 3,
5, 2, 9, 3, 8, 8, 2, 6, 4, 3, 4, 5, 2, 3, 3, 4, 2,
7, 5, 6, 8, 4, 3, 7, 6, 6, 5, 2, 3, 6, 12, 7, 6, 2,
5, 5, 5, 6, 2, 5, 2, 3, 1, 7, 6, 3, 5, 4, 4, 1, 6, 3, 1, 7)
mean(mourner)
sd(mourner)
t.test(mourner, mu=4.69, alternative = 'two.sided')
sqrt(4)
sd(mourner)
mean(mourner)
x<-2
x^2 / 2
x^2 / 3
pt()
t.test.Modified <- function(mean1,mean2,sd1,sd2,n1,n2){
# standard error
se<- sqrt( (sd1^2)/n1 + (sd2^2)/n2 )
# test statistic
t<- (mean1 - mean2)/se
# degrees of freedom
df <-  ((sd1^2)/n1 + (sd2^2)/n2)^2 / ( (sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1) )
# p-value
p <- 2 * pt(-abs(t), df)
return(dat)
}
t.test.Modified <- function(mean1,mean2,sd1,sd2,n1,n2){
# standard error
se<- sqrt( (sd1^2)/n1 + (sd2^2)/n2 )
# test statistic
t<- (mean1 - mean2)/se
# degrees of freedom
df <-  ((sd1^2)/n1 + (sd2^2)/n2)^2 / ( (sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1) )
# p-value
p <- 2 * pt(-abs(t), df)
dframe<-data.frame(P.Value=p,
DOF=df,
P.Value=p
)
return(dframe)
}
mean.mourner=mean(mourner)
sd.mourner=sd(mourner)
len.moruner=length(mourner)
len.mourner=length(mourner)
t.test.Modified(mean1 = 4.69, mean2 = mean.mourne,
sd1 = 2.6, sd2 =sd.mourner,
n1 = 121, n2 = len.moruner)
t.test.Modified(mean1 = 4.69, mean2 = mean.mourner,
sd1 = 2.6, sd2 =sd.mourner,
n1 = 121, n2 = len.moruner)
t.test(mourner, mu=4.69, alternative = 'two.sided')
t.test(mourner, alternative = 'two.sided')
pt(-abs(t), df)
t.test.Modified(mean1 = 4.69, mean2 = mean.mourner,
sd1 = 2.6, sd2 =sd.mourner,
n1 = 121, n2 = len.moruner)
t.test.Modified <- function(mean1,mean2,sd1,sd2,n1,n2){
# standard error
se<- sqrt( (sd1^2)/n1 + (sd2^2)/n2 )
# test statistic
t<- (mean1 - mean2)/se
# degrees of freedom
df <-  ((sd1^2)/n1 + (sd2^2)/n2)^2 / ( (sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1) )
# p-value
p <- 2 * pt(-abs(t), df)
# output data
dframe<-data.frame(test.statistic=p,
DOF=df,
P.Value=p)
return(dframe)
}
mean.mourner=mean(mourner)
sd.mourner=sd(mourner)
len.mourner=length(mourner)
t.test.Modified(mean1 = 4.69, mean2 = mean.mourner,
sd1 = 2.6, sd2 =sd.mourner,
n1 = 121, n2 = len.moruner)
t.test.Modified <- function(mean1,mean2,sd1,sd2,n1,n2){
# standard error
se<- sqrt( (sd1^2)/n1 + (sd2^2)/n2 )
# test statistic
t<- (mean1 - mean2)/se
# degrees of freedom
df <-  ((sd1^2)/n1 + (sd2^2)/n2)^2 / ( (sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1) )
# p-value
p <- 2 * pt(-abs(t), df)
# output data
dframe<-data.frame(test.statistic=t,
DOF=df,
P.Value=p)
return(dframe)
}
mean.mourner=mean(mourner)
sd.mourner=sd(mourner)
len.mourner=length(mourner)
t.test.Modified(mean1 = 4.69, mean2 = mean.mourner,
sd1 = 2.6, sd2 =sd.mourner,
n1 = 121, n2 = len.moruner)
x<-rnorm(n = 30, mean = 10, sd = 5)
x<-rnorm(n = 30, mean = 10, sd = 5)
y<-rnorm(n = 30, mean = 5, sd = 5)
t.test.Modified(mean1=10, mean2=5, sd1=5, sd2=5, n1=30, n2=30)
t.test(x~y)
x
y
t.test(x, y)
t.test.Modified(mean1=10, mean2=5, sd1=5, sd2=5, n1=30, n2=30)
t.test(x, y)
t.test.Modified <- function(mean1,mean2,sd1,sd2,n1,n2){
# standard error
se<- sqrt( sd1^2/n1 + sd2^2/n2 )
# test statistic
t<- (mean1 - mean2)/se
# degrees of freedom
df <-  ((sd1^2)/n1 + (sd2^2)/n2)^2 / ( (sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1) )
# p-value
p <- 2 * pt(-abs(t), df)
# output data
dframe<-data.frame(test.statistic=t,
DOF=df,
P.Value=p)
return(dframe)
}
t.test.Modified(mean1=10, mean2=5, sd1=5, sd2=5, n1=30, n2=30)
t.test(x, y)
x<-rnorm(n = 300, mean = 100, sd = 50)
y<-rnorm(n = 300, mean = 50, sd = 50)
t.test.Modified(mean1=10, mean2=5, sd1=5, sd2=5, n1=30, n2=30)
t.test(x, y)
x<-rnorm(n = 300, mean = 100, sd = 50)
y<-rnorm(n = 300, mean = 50, sd = 50)
t.test(x, y)
t.test(x, y)
t.test(x, y)
t.test.Modified(mean1=10, mean2=5, sd1=5, sd2=5, n1=30, n2=30)
t.test(x, y)
x<-rnorm(n = 3000, mean = 100, sd = 50)
y<-rnorm(n = 3000, mean = 100, sd = 50)
t.test.Modified(mean1=10, mean2=5, sd1=5, sd2=5, n1=30, n2=30)
t.test(x, y)
t.test.Modified(mean1=3000, mean2=3000, sd1=50, sd2=50, n1=100, n2=100)
t.test(x, y)
t.test.Modified <- function(mean1,mean2,sd1,sd2,n1,n2){
# standard error
se<- sqrt( sd1^2/n1 + sd2^2/n2 )
# test statistic
t<- (mean1 - mean2)/se
# degrees of freedom
df <-  ( sd1^2/n1 + sd2^2/n2 )^2 / ( (sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1) )
# p-value
p <- 2 * pt(-abs(t), df)
# output data
dframe<-data.frame(test.statistic=t,
DOF=df,
P.Value=p)
return(dframe)
}
t.test.Modified(mean1 = 4.69, mean2 = mean.mourner,
sd1 = 2.6, sd2 =sd.mourner,
n1 = 121, n2 = len.moruner)
